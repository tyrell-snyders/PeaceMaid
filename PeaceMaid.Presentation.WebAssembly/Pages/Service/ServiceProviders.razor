@page "/service-providers/"

@using BlazorBootstrap
@using PeaceMaid.Application.Services.ServiceProviders
@using PeaceMaid.Domain.Entities
@using PeaceMaid.Application.DTOs
@using NetcodeHub.Packages.Components.Validations.OnInput
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text

@inject ISvcProviderService iSvcProviderService
@inject NavigationManager NavigationManager

<h3>Service Providers</h3>

<Modal @ref="modal" title="Register as service provider" IsVerticallyCentered="true" IsScrollable="true">
    <BodyTemplate>
        <EditForm Model="sProvider" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="userId">UserId:</label>
                <InputNumber id="userId" @bind-Value="sProvider.UserId" />
            </div>

            <div>
                <label for="serviceDescription">Service Description</label>
                <FloatingText id="serviceDescription" @bind-Value="sProvider.ServiceDescription" />
            </div>

            <div>
                <label for="rating">Rating:</label>
                <InputNumber id="rating" @bind-Value="sProvider.Rating" />
            </div>

            <div>
                <label for="availability">Availability:</label>
                <InputText id="availability" @bind-Value="sProvider.Availability" />
            </div>

            <div>
                <label for="profilePicture">Profile Picture:</label>
                <InputFile OnChange="HandleFileSelected" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModal">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="HandleValidSubmit">Register</Button>
    </FooterTemplate>
</Modal>

@* Service Providers *@
<div class="col-lg-6 container">
    @foreach (ServiceProvider srvProvider in serviceProviders)
    {
        <div onclick="@(() => HandleNavigation(srvProvider.Id))" class="service-card mb-5 mt-5 rounded mx-auto border-5 border-primary">
            <img src="@ProfilePicture(srvProvider.ProfilePicture)"
            class="card-img-top"
            alt="profile picture">
            <div class="card-body">
                <h5 class="card-subtitle">Rating: @srvProvider.Rating</h5>
                <p class="card-text">@srvProvider.ServiceDescription</p>
            </div>
            @if (srvProvider.UserId.Equals(uID))
            {
                <Button 
                    Color="ButtonColor.Danger"
                    onclick="@(() => HandleDelete(srvProvider.Id))"
                    class="float-right"
                >
                    Delete
                </Button>
            }
        </div>
    }
</div>

<Button Color="ButtonColor.Primary" @onclick="OnShowModal" class="float-right">Register as A Service Provider</Button>


@if (!string.IsNullOrEmpty(Message))
{
    <p class="error-message">@Message</p>
}

@code {
    //Get Service Providers
    private List<ServiceProvider> serviceProviders = new List<ServiceProvider>();
    private int uID = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProviders();
        StateHasChanged();
    }

    private async Task LoadProviders() 
    {
        try 
        {
            serviceProviders = await iSvcProviderService.GetAsync();
            uID = await iSvcProviderService.GetUserId(); // Get UserId
        } 
        catch (Exception e)
        {
            Message = $"Error loading service providers: {e.Message}";
        }
    }

    /// <summary>
    /// Convert from byte[] to string
    /// </summary>
    /// <param name="image"
    private static string ProfilePicture(byte[] image) => 
        $"data:image/jpeg;base64,{Convert.ToBase64String(image)}";

    //modal
    private Modal modal = default;

    private async Task OnShowModal() 
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModal() 
    {
        await modal.HideAsync();
    }

    private ServiceProviderDTO sProvider = new ServiceProviderDTO
    { 
        ServiceDescription = string.Empty,
        Rating = 0,
        Availability = string.Empty,
        UserId = 0,
        ProfilePicture = null,
    };
    private IBrowserFile SelectedFile;
    private string Message = string.Empty;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
    }

    private async Task HandleDelete(int spId) {
        var result = await iSvcProviderService.DeleteAsync(spId);
        if (result.Flag) 
            NavigationManager.Refresh();
        else
            Console.WriteLine(result.Message);
    }

    private void HandleNavigation(int Id) 
    {
        NavigationManager.NavigateTo($"https://localhost:7203/service-providers/services/{Id}");
    }


    private async Task HandleValidSubmit()
    {
        // MultipartFormDataContent
        if (SelectedFile != null)
        {
            var formData = new MultipartFormDataContent();

            using (var memoryStream = new MemoryStream())
            {
                await SelectedFile.OpenReadStream(5120000).CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();
                formData.Add(new ByteArrayContent(fileBytes), "ProfilePicture", SelectedFile.Name);
            }

            formData.Add(new StringContent(sProvider.Availability), "Availability");
            formData.Add(new StringContent(sProvider.ServiceDescription), "ServiceDescription");
            formData.Add(new StringContent(sProvider.Rating.ToString()), "Rating");
            formData.Add(new StringContent(sProvider.UserId.ToString()), "UserId");

            var response = await iSvcProviderService.AddAsync(formData);

            Message = response.Message;
            if (response.Flag)
            {
                NavigationManager.Refresh();
            }
            else
            {
                Console.WriteLine(response.Message);
            }
        }
        else
        {
            Message = "Please upload a profile picture.";
        }
    }
}