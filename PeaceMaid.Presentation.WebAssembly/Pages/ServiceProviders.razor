@page "/services/service-providers"

@using BlazorBootstrap
@using PeaceMaid.Application.Services.ServiceProviders
@using PeaceMaid.Domain.Entities
@using PeaceMaid.Application.DTOs
@using NetcodeHub.Packages.Components.Validations.OnInput
@using System.Net.Http.Headers

@inject ISvcProviderService iSvcProviderService
@inject NavigationManager NavigationManager

<h3>Service Providers</h3>


<Modal @ref="modal" title="Register as service provider" IsVerticallyCentered="true" IsScrollable="true">
    <BodyTemplate>
        <EditForm Model="sProvider" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="userId">UserId:</label>
                <InputNumber id="userId" @bind-Value="sProvider.UserId" />
            </div>

            <div>
                <label for="serviceDescription">Service Description</label>
                <FloatingText id="serviceDescription" @bind-Value="sProvider.ServiceDescription" />
            </div>

            <div>
                <label for="rating">Rating:</label>
                <InputNumber id="rating" @bind-Value="sProvider.Rating" />
            </div>

            <div>
                <label for="availability">Availability:</label>
                <InputText id="availability" @bind-Value="sProvider.Availability" />
            </div>

            <div>
                <label for="profilePicture">Profile Picture:</label>
                <InputFile OnChange="HandleFileSelected" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModal">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="HandleValidSubmit">Register</Button>
    </FooterTemplate>
</Modal>



<div class="col-lg-6 container">
    @foreach (ServiceProvider srvProvider in serviceProviders)
    {
        <div class="service-card mb-5 mt-5 rounded mx-auto border-5 border-primary">
            <img src="@ProfilePicture(srvProvider.ProfilePicture)"
                 class="card-img-top"
                 alt="profile picture">
            <div class="card-body">
                <h5 class="card-subtitle">Rating: @srvProvider.Rating</h5>
                <p class="card-text">@srvProvider.ServiceDescription</p>
            </div>
        </div>
    }
</div>

<Button Color="ButtonColor.Primary" @onclick="OnShowModal" class="float-right">Register as A Service Provider</Button>


@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@code {
    //Get Service Providers
    private List<ServiceProvider> serviceProviders = new List<ServiceProvider>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProviders();
    }

    private async Task LoadProviders() 
    {
        try 
        {
            serviceProviders = await iSvcProviderService.GetAsync();
        } 
        catch (Exception e)
        {
            Message = $"Error loading service providers: {e.Message}";
        }
    }

    /// <summary>
    /// Convert from byte[] to string
    /// </summary>
    /// <param name="image"
    private static string ProfilePicture(byte[] image) => 
        $"data:image/jpeg;base64,{Convert.ToBase64String(image)}";

    //modal
    private Modal modal = default;

    private async Task OnShowModal() 
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModal() 
    {
        await modal.HideAsync();
    }

    private ServiceProviderDTO sProvider = new ServiceProviderDTO
    { 
        Id = 0,
        ServiceDescription = string.Empty,
        Rating = 0,
        Availability = string.Empty,
        UserId = 0,
        ProfilePicture = [],
    };
    private IBrowserFile SelectedFile;
    private string Message = string.Empty;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        if (SelectedFile != null)
        {
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(sProvider.ServiceDescription), "ServiceDescription");
            content.Add(new StringContent(sProvider.Rating.ToString()), "Rating");
            content.Add(new StringContent(sProvider.Availability), "Availability");

            var fileContent = new StreamContent(SelectedFile.OpenReadStream(5120000));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(SelectedFile.ContentType);
            content.Add(fileContent, "profilePicture", SelectedFile.Name);

            var result = await iSvcProviderService.AddAsync(sProvider, content);

            Message = result.Message;
            if (result.Flag)
            {
                NavigationManager.NavigateTo("/services/service-providers");
            }
        }
        else
        {
            Message = "Please upload a profile picture.";
        }
    }
}
